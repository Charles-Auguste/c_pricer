#include "Quadrature.h"
#include <vector>
#include <iostream>
// #include <boost/math/quadrature/gauss.hpp>



std::vector<double> gauss_hermite_points(const int& degree) {

	//auto gauss_hermite_points_weights = boost::math::quadrature::gauss_hermite<double, degree>();
	//return gauss_hermite_points_weights.first;

    return { -10.15910925, -9.52090368, -8.992398, -8.52056928,
        -8.08518865, -7.67583994, -7.28627659, -6.91238153,
        -6.55125917, -6.20077356, -5.8592902, -5.52552109,
        -5.19842653, -4.87715008, -4.56097376, -4.24928644,
        -3.94156073, -3.63733588, -3.33620465, -3.03780334,
        -2.74180375, -2.4479069, -2.15583787, -1.86534153,
        -1.57617901, -1.28812467, -1.0009635, -0.71448878,
        -0.42850006, -0.14280124, 0.14280124, 0.42850006,
        0.71448878, 1.0009635, 1.28812467, 1.57617901,
        1.86534153, 2.15583787, 2.4479069, 2.74180375,
        3.03780334, 3.33620465, 3.63733588, 3.94156073,
        4.24928644, 4.56097376, 4.87715008, 5.19842653,
        5.52552109, 5.8592902, 6.20077356, 6.55125917,
        6.91238153, 7.28627659, 7.67583994, 8.08518865,
        8.52056928, 8.992398, 9.52090368, 10.15910925 };
}



std::vector<double> gauss_hermite_weights(const int& degree) {


    //auto gauss_hermite_points_weights = boost::math::quadrature::gauss_hermite<double, degree>();
    //return gauss_hermite_points_weights.second;

    return { 1.10958725e-45, 2.43974759e-40, 3.77162673e-36, 1.33255961e-32,
        1.71557315e-29, 1.02940600e-26, 3.34575696e-24, 6.51256726e-22,
        8.15364047e-20, 6.92324791e-18, 4.15244411e-16, 1.81662458e-14,
        5.94843052e-13, 1.48895735e-11, 2.89935901e-10, 4.45682278e-09,
        5.47555462e-08, 5.43351613e-07, 4.39428694e-06, 2.91874190e-05,
        1.60277335e-04, 7.31773557e-04, 2.79132483e-03, 8.93217836e-03,
        2.40612728e-02, 5.47189709e-02, 1.05298764e-01, 1.71776157e-01,
        2.37868905e-01, 2.79853118e-01, 2.79853118e-01, 2.37868905e-01,
        1.71776157e-01, 1.05298764e-01, 5.47189709e-02, 2.40612728e-02,
        8.93217836e-03, 2.79132483e-03, 7.31773557e-04, 1.60277335e-04,
        2.91874190e-05, 4.39428694e-06, 5.43351613e-07, 5.47555462e-08,
        4.45682278e-09, 2.89935901e-10, 1.48895735e-11, 5.94843052e-13,
        1.81662458e-14, 4.15244411e-16, 6.92324791e-18, 8.15364047e-20,
        6.51256726e-22, 3.34575696e-24, 1.02940600e-26, 1.71557315e-29,
        1.33255961e-32, 3.77162673e-36, 2.43974759e-40, 1.10958725e-45 } ;
}

